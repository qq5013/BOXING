//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4984
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace THOK.AS.Boxing.Xsd {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PrintDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PrintDataSet : global::System.Data.DataSet {
        
        private PrintDataSetDataTable tablePrintDataSet;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PrintDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PrintDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PrintDataSet"] != null)) {
                    base.Tables.Add(new PrintDataSetDataTable(ds.Tables["PrintDataSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrintDataSetDataTable _PrintDataSet {
            get {
                return this.tablePrintDataSet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PrintDataSet cln = ((PrintDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PrintDataSet"] != null)) {
                    base.Tables.Add(new PrintDataSetDataTable(ds.Tables["PrintDataSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablePrintDataSet = ((PrintDataSetDataTable)(base.Tables["PrintDataSet"]));
            if ((initTable == true)) {
                if ((this.tablePrintDataSet != null)) {
                    this.tablePrintDataSet.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PrintDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PrintDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePrintDataSet = new PrintDataSetDataTable();
            base.Tables.Add(this.tablePrintDataSet);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_PrintDataSet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PrintDataSet ds = new PrintDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void PrintDataSetRowChangeEventHandler(object sender, PrintDataSetRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrintDataSetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSORTNO;
            
            private global::System.Data.DataColumn columnORDERID;
            
            private global::System.Data.DataColumn columnCUSTOMERCODE;
            
            private global::System.Data.DataColumn columnCUSTOMERNAME;
            
            private global::System.Data.DataColumn columnCIGARETTECODE;
            
            private global::System.Data.DataColumn columnCIGARETTENAME;
            
            private global::System.Data.DataColumn columnQUANTITY;
            
            private global::System.Data.DataColumn columnBATCHNO;
            
            private global::System.Data.DataColumn columnORDERNO;
            
            private global::System.Data.DataColumn columnROUTECODE;
            
            private global::System.Data.DataColumn columnROUTENAME;
            
            private global::System.Data.DataColumn columnORDERDATE;
            
            private global::System.Data.DataColumn columnSCDATE;
            
            private global::System.Data.DataColumn columnLINECODE;
            
            private global::System.Data.DataColumn columnZZBS;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnCUSNO;
            
            private global::System.Data.DataColumn columnAREANAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetDataTable() {
                this.TableName = "PrintDataSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintDataSetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrintDataSetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SORTNOColumn {
                get {
                    return this.columnSORTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERIDColumn {
                get {
                    return this.columnORDERID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSTOMERCODEColumn {
                get {
                    return this.columnCUSTOMERCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSTOMERNAMEColumn {
                get {
                    return this.columnCUSTOMERNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIGARETTECODEColumn {
                get {
                    return this.columnCIGARETTECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CIGARETTENAMEColumn {
                get {
                    return this.columnCIGARETTENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QUANTITYColumn {
                get {
                    return this.columnQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BATCHNOColumn {
                get {
                    return this.columnBATCHNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERNOColumn {
                get {
                    return this.columnORDERNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROUTECODEColumn {
                get {
                    return this.columnROUTECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROUTENAMEColumn {
                get {
                    return this.columnROUTENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORDERDATEColumn {
                get {
                    return this.columnORDERDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCDATEColumn {
                get {
                    return this.columnSCDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINECODEColumn {
                get {
                    return this.columnLINECODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZZBSColumn {
                get {
                    return this.columnZZBS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CUSNOColumn {
                get {
                    return this.columnCUSNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AREANAMEColumn {
                get {
                    return this.columnAREANAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow this[int index] {
                get {
                    return ((PrintDataSetRow)(this.Rows[index]));
                }
            }
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowChanging;
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowChanged;
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowDeleting;
            
            public event PrintDataSetRowChangeEventHandler PrintDataSetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrintDataSetRow(PrintDataSetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow AddPrintDataSetRow(
                        string SORTNO, 
                        string ORDERID, 
                        string CUSTOMERCODE, 
                        string CUSTOMERNAME, 
                        string CIGARETTECODE, 
                        string CIGARETTENAME, 
                        string QUANTITY, 
                        string BATCHNO, 
                        string ORDERNO, 
                        string ROUTECODE, 
                        string ROUTENAME, 
                        string ORDERDATE, 
                        string SCDATE, 
                        string LINECODE, 
                        string ZZBS, 
                        string ADDRESS, 
                        string CUSNO, 
                        string AREANAME) {
                PrintDataSetRow rowPrintDataSetRow = ((PrintDataSetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SORTNO,
                        ORDERID,
                        CUSTOMERCODE,
                        CUSTOMERNAME,
                        CIGARETTECODE,
                        CIGARETTENAME,
                        QUANTITY,
                        BATCHNO,
                        ORDERNO,
                        ROUTECODE,
                        ROUTENAME,
                        ORDERDATE,
                        SCDATE,
                        LINECODE,
                        ZZBS,
                        ADDRESS,
                        CUSNO,
                        AREANAME};
                rowPrintDataSetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrintDataSetRow);
                return rowPrintDataSetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrintDataSetDataTable cln = ((PrintDataSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrintDataSetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSORTNO = base.Columns["SORTNO"];
                this.columnORDERID = base.Columns["ORDERID"];
                this.columnCUSTOMERCODE = base.Columns["CUSTOMERCODE"];
                this.columnCUSTOMERNAME = base.Columns["CUSTOMERNAME"];
                this.columnCIGARETTECODE = base.Columns["CIGARETTECODE"];
                this.columnCIGARETTENAME = base.Columns["CIGARETTENAME"];
                this.columnQUANTITY = base.Columns["QUANTITY"];
                this.columnBATCHNO = base.Columns["BATCHNO"];
                this.columnORDERNO = base.Columns["ORDERNO"];
                this.columnROUTECODE = base.Columns["ROUTECODE"];
                this.columnROUTENAME = base.Columns["ROUTENAME"];
                this.columnORDERDATE = base.Columns["ORDERDATE"];
                this.columnSCDATE = base.Columns["SCDATE"];
                this.columnLINECODE = base.Columns["LINECODE"];
                this.columnZZBS = base.Columns["ZZBS"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnCUSNO = base.Columns["CUSNO"];
                this.columnAREANAME = base.Columns["AREANAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSORTNO = new global::System.Data.DataColumn("SORTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSORTNO);
                this.columnORDERID = new global::System.Data.DataColumn("ORDERID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERID);
                this.columnCUSTOMERCODE = new global::System.Data.DataColumn("CUSTOMERCODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMERCODE);
                this.columnCUSTOMERNAME = new global::System.Data.DataColumn("CUSTOMERNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMERNAME);
                this.columnCIGARETTECODE = new global::System.Data.DataColumn("CIGARETTECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTECODE);
                this.columnCIGARETTENAME = new global::System.Data.DataColumn("CIGARETTENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCIGARETTENAME);
                this.columnQUANTITY = new global::System.Data.DataColumn("QUANTITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUANTITY);
                this.columnBATCHNO = new global::System.Data.DataColumn("BATCHNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBATCHNO);
                this.columnORDERNO = new global::System.Data.DataColumn("ORDERNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERNO);
                this.columnROUTECODE = new global::System.Data.DataColumn("ROUTECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTECODE);
                this.columnROUTENAME = new global::System.Data.DataColumn("ROUTENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnROUTENAME);
                this.columnORDERDATE = new global::System.Data.DataColumn("ORDERDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORDERDATE);
                this.columnSCDATE = new global::System.Data.DataColumn("SCDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCDATE);
                this.columnLINECODE = new global::System.Data.DataColumn("LINECODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINECODE);
                this.columnZZBS = new global::System.Data.DataColumn("ZZBS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZZBS);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnCUSNO = new global::System.Data.DataColumn("CUSNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSNO);
                this.columnAREANAME = new global::System.Data.DataColumn("AREANAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAREANAME);
                this.ExtendedProperties.Add("Generator_TablePropName", "_PrintDataSet");
                this.ExtendedProperties.Add("Generator_UserTableName", "PrintDataSet");
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow NewPrintDataSetRow() {
                return ((PrintDataSetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrintDataSetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrintDataSetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrintDataSetRowChanged != null)) {
                    this.PrintDataSetRowChanged(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrintDataSetRowChanging != null)) {
                    this.PrintDataSetRowChanging(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrintDataSetRowDeleted != null)) {
                    this.PrintDataSetRowDeleted(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrintDataSetRowDeleting != null)) {
                    this.PrintDataSetRowDeleting(this, new PrintDataSetRowChangeEvent(((PrintDataSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrintDataSetRow(PrintDataSetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PrintDataSet ds = new PrintDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrintDataSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrintDataSetRow : global::System.Data.DataRow {
            
            private PrintDataSetDataTable tablePrintDataSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrintDataSetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrintDataSet = ((PrintDataSetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SORTNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.SORTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“SORTNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.SORTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERID {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ORDERIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“ORDERID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ORDERIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMERCODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CUSTOMERCODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“CUSTOMERCODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CUSTOMERCODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSTOMERNAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CUSTOMERNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“CUSTOMERNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CUSTOMERNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTECODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CIGARETTECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“CIGARETTECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CIGARETTECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CIGARETTENAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CIGARETTENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“CIGARETTENAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CIGARETTENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUANTITY {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.QUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“QUANTITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.QUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BATCHNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.BATCHNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“BATCHNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.BATCHNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ORDERNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“ORDERNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ORDERNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTECODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ROUTECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“ROUTECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ROUTECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ROUTENAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ROUTENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“ROUTENAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ROUTENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORDERDATE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ORDERDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“ORDERDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ORDERDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCDATE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.SCDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“SCDATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.SCDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINECODE {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.LINECODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“LINECODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.LINECODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZZBS {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ZZBSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“ZZBS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ZZBSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.ADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“ADDRESS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CUSNO {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.CUSNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“CUSNO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.CUSNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AREANAME {
                get {
                    try {
                        return ((string)(this[this.tablePrintDataSet.AREANAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PrintDataSet”中列“AREANAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePrintDataSet.AREANAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSORTNONull() {
                return this.IsNull(this.tablePrintDataSet.SORTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSORTNONull() {
                this[this.tablePrintDataSet.SORTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERIDNull() {
                return this.IsNull(this.tablePrintDataSet.ORDERIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERIDNull() {
                this[this.tablePrintDataSet.ORDERIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMERCODENull() {
                return this.IsNull(this.tablePrintDataSet.CUSTOMERCODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMERCODENull() {
                this[this.tablePrintDataSet.CUSTOMERCODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSTOMERNAMENull() {
                return this.IsNull(this.tablePrintDataSet.CUSTOMERNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSTOMERNAMENull() {
                this[this.tablePrintDataSet.CUSTOMERNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIGARETTECODENull() {
                return this.IsNull(this.tablePrintDataSet.CIGARETTECODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIGARETTECODENull() {
                this[this.tablePrintDataSet.CIGARETTECODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCIGARETTENAMENull() {
                return this.IsNull(this.tablePrintDataSet.CIGARETTENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCIGARETTENAMENull() {
                this[this.tablePrintDataSet.CIGARETTENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUANTITYNull() {
                return this.IsNull(this.tablePrintDataSet.QUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUANTITYNull() {
                this[this.tablePrintDataSet.QUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBATCHNONull() {
                return this.IsNull(this.tablePrintDataSet.BATCHNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBATCHNONull() {
                this[this.tablePrintDataSet.BATCHNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERNONull() {
                return this.IsNull(this.tablePrintDataSet.ORDERNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERNONull() {
                this[this.tablePrintDataSet.ORDERNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROUTECODENull() {
                return this.IsNull(this.tablePrintDataSet.ROUTECODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROUTECODENull() {
                this[this.tablePrintDataSet.ROUTECODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsROUTENAMENull() {
                return this.IsNull(this.tablePrintDataSet.ROUTENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetROUTENAMENull() {
                this[this.tablePrintDataSet.ROUTENAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORDERDATENull() {
                return this.IsNull(this.tablePrintDataSet.ORDERDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORDERDATENull() {
                this[this.tablePrintDataSet.ORDERDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCDATENull() {
                return this.IsNull(this.tablePrintDataSet.SCDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCDATENull() {
                this[this.tablePrintDataSet.SCDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINECODENull() {
                return this.IsNull(this.tablePrintDataSet.LINECODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINECODENull() {
                this[this.tablePrintDataSet.LINECODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZZBSNull() {
                return this.IsNull(this.tablePrintDataSet.ZZBSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZZBSNull() {
                this[this.tablePrintDataSet.ZZBSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESSNull() {
                return this.IsNull(this.tablePrintDataSet.ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESSNull() {
                this[this.tablePrintDataSet.ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCUSNONull() {
                return this.IsNull(this.tablePrintDataSet.CUSNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCUSNONull() {
                this[this.tablePrintDataSet.CUSNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAREANAMENull() {
                return this.IsNull(this.tablePrintDataSet.AREANAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAREANAMENull() {
                this[this.tablePrintDataSet.AREANAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrintDataSetRowChangeEvent : global::System.EventArgs {
            
            private PrintDataSetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRowChangeEvent(PrintDataSetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrintDataSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591